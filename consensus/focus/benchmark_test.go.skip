// Copyright (C) 2019-2025, Lux Industries Inc. All rights reserved.
// See the file LICENSE for licensing terms.

package confidence

import (
	"testing"
)

// BenchmarkUnaryConfidence benchmarks unary confidence tracking
func BenchmarkUnaryConfidence(b *testing.B) {
	alphaPreference := 15
	termConditions := []TerminationCondition{
		{AlphaConfidence: 18, Beta: 8},
	}
	
	b.ResetTimer()
	b.ReportAllocs()
	
	for i := 0; i < b.N; i++ {
		conf := NewUnaryConfidence(alphaPreference, termConditions)
		
		// Simulate successful polls
		for j := 0; j < termConditions[0].Beta; j++ {
			conf.RecordPoll(termConditions[0].AlphaConfidence)
			if conf.Finalized() {
				break
			}
		}
	}
}

// BenchmarkRecordPoll benchmarks recording poll results
func BenchmarkRecordPoll(b *testing.B) {
	alphaPreference := 15
	termConditions := []TerminationCondition{
		{AlphaConfidence: 18, Beta: 8},
	}
	conf := NewUnaryConfidence(alphaPreference, termConditions)
	
	b.ResetTimer()
	b.ReportAllocs()
	
	for i := 0; i < b.N; i++ {
		conf.RecordPoll(termConditions[0].AlphaConfidence)
	}
}

// BenchmarkRecordUnsuccessfulPoll benchmarks unsuccessful poll recording
func BenchmarkRecordUnsuccessfulPoll(b *testing.B) {
	alphaPreference := 15
	termConditions := []TerminationCondition{
		{AlphaConfidence: 18, Beta: 8},
	}
	conf := NewUnaryConfidence(alphaPreference, termConditions)
	
	b.ResetTimer()
	b.ReportAllocs()
	
	for i := 0; i < b.N; i++ {
		conf.RecordUnsuccessfulPoll()
	}
}

// BenchmarkFinalizedCheck benchmarks finalization checking
func BenchmarkFinalizedCheck(b *testing.B) {
	alphaPreference := 15
	termConditions := []TerminationCondition{
		{AlphaConfidence: 18, Beta: 8},
	}
	conf := NewUnaryConfidence(alphaPreference, termConditions)
	
	// Get close to finalization
	for i := 0; i < termConditions[0].Beta-1; i++ {
		conf.RecordPoll(termConditions[0].AlphaConfidence)
	}
	
	b.ResetTimer()
	b.ReportAllocs()
	
	for i := 0; i < b.N; i++ {
		_ = conf.Finalized()
	}
}

// BenchmarkMultiTerminationConditions benchmarks multiple termination conditions
func BenchmarkMultiTerminationConditions(b *testing.B) {
	alphaPreference := 15
	termConditions := []TerminationCondition{
		{AlphaConfidence: 18, Beta: 8},
		{AlphaConfidence: 16, Beta: 12},
		{AlphaConfidence: 14, Beta: 16},
	}
	
	b.ResetTimer()
	b.ReportAllocs()
	
	for i := 0; i < b.N; i++ {
		conf := NewUnaryConfidence(alphaPreference, termConditions)
		
		// Simulate polls until finalization
		for !conf.Finalized() {
			// Alternate between successful and unsuccessful
			if i%3 == 0 {
				conf.RecordUnsuccessfulPoll()
			} else {
				conf.RecordPoll(termConditions[0].AlphaConfidence)
			}
		}
	}
}

// BenchmarkParallelConfidence benchmarks concurrent confidence operations
func BenchmarkParallelConfidence(b *testing.B) {
	alphaPreference := 15
	termConditions := []TerminationCondition{
		{AlphaConfidence: 18, Beta: 8},
	}
	
	b.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			conf := NewUnaryConfidence(alphaPreference, termConditions)
			
			for j := 0; j < termConditions[0].Beta; j++ {
				conf.RecordPoll(termConditions[0].AlphaConfidence)
				if conf.Finalized() {
					break
				}
			}
		}
	})
}