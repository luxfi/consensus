name: CI

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  pull_request:
    branches: [main]

permissions:
  contents: read

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Install ZeroMQ dependencies
        run: |
          echo "Using pure Go ZMQ4 implementation - no system dependencies needed"

      - name: Get dependencies
        run: go mod download

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.txt
          flags: unittests
          token: ${{ secrets.CODECOV_TOKEN }}

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Install ZeroMQ dependencies
        run: |
          echo "Using pure Go ZMQ4 implementation - no system dependencies needed"

      - name: Get dependencies
        run: go mod download

      - name: Build ZMQ benchmark tool
        run: make zmq-bench

      - name: Run ZeroMQ benchmarks
        run: |
          echo "=== Running ZeroMQ Benchmarks ==="
          cd networking/zmq4
          go test -bench=. -benchmem -benchtime=10s -run=^$ -v | tee ../../zmq-benchmark-results.txt
          
      - name: Display benchmark results
        run: |
          echo "## ZeroMQ Benchmark Results" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat zmq-benchmark-results.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Run consensus benchmarks
        run: |
          echo "=== Running Consensus Benchmarks ==="
          go test -bench=. -benchmem -benchtime=10s -run=^$ ./benchmark/... | tee consensus-benchmark-results.txt

      - name: Display consensus benchmark results
        run: |
          echo "## Consensus Benchmark Results" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat consensus-benchmark-results.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
      - name: Run multi-validator ZMQ benchmarks
        run: |
          echo "## Multi-Validator ZMQ Benchmarks" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          CPU_COUNT=$(nproc || echo 4)
          echo "Running on $CPU_COUNT CPU cores" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          for NODES in 10 100 1000; do
            echo "### $NODES Nodes (batch=4096)" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            ./bin/zmq-bench -nodes $NODES -batch 4096 -interval 5ms -rounds 50 2>&1 | grep -E "^ðŸ“Š|Nodes:|Duration:|TPS:|Throughput:|Message rate:|latency:" >> $GITHUB_STEP_SUMMARY || true
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          done

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: |
            zmq-benchmark-results.txt
            consensus-benchmark-results.txt

      - name: Comment PR with benchmark results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const zmqResults = fs.readFileSync('zmq-benchmark-results.txt', 'utf8');
            const consensusResults = fs.readFileSync('consensus-benchmark-results.txt', 'utf8');
            
            const comment = `## Benchmark Results
            
            ### ZeroMQ Benchmarks
            \`\`\`
            ${zmqResults}
            \`\`\`
            
            ### Consensus Benchmarks
            \`\`\`
            ${consensusResults}
            \`\`\``;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=10m

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Build
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
        run: |
          go build -v -o consensus-${{ matrix.os }}-${{ matrix.arch }} ./cmd/consensus

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: consensus-${{ matrix.os }}-${{ matrix.arch }}
          path: consensus-${{ matrix.os }}-${{ matrix.arch }}

  release:
    name: Release
    needs: [test, lint, build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            consensus-linux-amd64/consensus-linux-amd64
            consensus-linux-arm64/consensus-linux-arm64
            consensus-darwin-amd64/consensus-darwin-amd64
            consensus-darwin-arm64/consensus-darwin-arm64
            consensus-windows-amd64/consensus-windows-amd64
          generate_release_notes: true
          draft: false
          prerelease: false